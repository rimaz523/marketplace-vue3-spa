trigger:
  branches:
    include:
      - master

variables:
  - template: variables/build.yml
  - template: variables/dev.yml
  - template: variables/service-connections.yml

stages:
  - stage: 'Build'
    displayName: 'Build the front end react web application'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: '$(buildVmImage)'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '$(nodeVersion)'
            displayName: 'Install Node.js'
          - script: 'npm install -g pnpm@7.26.3'
            displayName: 'Install PNPM'
          - script: |
              pnpm install
            displayName: 'Initialize project'
          - script: |
              pnpm build
            displayName: 'Build the project'
          - task: CopyFiles@2
            inputs:
              sourceFolder: 'dist'
              contents: '**/*'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
              cleanTargetFolder: true
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              includeRootFolder: false
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

  - stage: 'Deploy_Dev'
    displayName: 'Deploy to Dev'
    dependsOn: 'Build'
    condition: and (succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - deployment: 'Deploy'
        displayName: 'Deploy job'
        environment: DEV
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: 'Deploy vue3 front-end webapp to azure app service'
                  inputs:
                    azureSubscription: '$(managedIdentityName)'
                    appName: '$(project)-$(environment)-$(webAppName)'
                    appType: 'webAppLinux'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    appSettings: |
                      -APPINSIGHTS_INSTRUMENTATIONKEY $(keyVaultAppInsightsKey) 
                      -APPLICATIONINSIGHTS_CONNECTION_STRING $(keyVaultAppInsightsConnectionString) 
                      -APPINSIGHTS_PROFILERFEATURE_VERSION 1.0.0 
                      -APPINSIGHTS_SNAPSHOTFEATURE_VERSION 1.0.0 
                      -ApplicationInsightsAgent_EXTENSION_VERSION ~3 
                      -DiagnosticServices_EXTENSION_VERSION ~3 
                      -InstrumentationEngine_EXTENSION_VERSION disabled 
                      -SnapshotDebugger_EXTENSION_VERSION disabled 
                      -XDT_MicrosoftApplicationInsights_BaseExtensions disabled 
                      -XDT_MicrosoftApplicationInsights_Mode recommended 
                      -XDT_MicrosoftApplicationInsights_PreemptSdk disabled
